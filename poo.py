# -*- coding: utf-8 -*-
"""POO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rwZLUfrciVsqQM-ApOb4Y3eJLuyVs1e9
"""

class Persona:
    def __init__(self, nombre, apellidos, identificacion, ano_nacimiento):
        self.nombre = nombre
        self.apellidos = apellidos
        self.identificacion = identificacion
        self.ano_nacimiento = ano_nacimiento

    def datos(self):
        print("Nombre:", self.nombre)
        print("Apellidos:", self.apellidos)
        print("Identificación:", self.identificacion)
        print("Año de nacimiento:", self.ano_nacimiento)


def main():
    print("Ingresa datos de la persona 1")
    nombre1 = input("Nombre: ")
    apellidos1 = input("Apellidos: ")
    identificacion1 = input("Identificación: ")
    ano_nacimiento1 = input("Año de nacimiento: ")

    print("Ingresa datos de la persona 2")
    nombre2 = input("Nombre: ")
    apellidos2 = input("Apellidos: ")
    identificacion2 = input("Identificación: ")
    ano_nacimiento2 = input("Año de nacimiento: ")

    persona1 = Persona(nombre1, apellidos1, identificacion1, ano_nacimiento1)
    persona2 = Persona(nombre2, apellidos2, identificacion2, ano_nacimiento2)

    print("Datos de la Persona 1:")
    persona1.datos()
    print("\nDatos de la Persona 2:")
    persona2.datos()


main()

class Planeta:
    def __init__(self, nombre=None, cantidaddesatelites=0, masa=0.0, volumen=0.0,
                 diametro=0.0, distanciasol=0, tipoplaneta=None, observable=False):
        self.nombre = nombre
        self.cantidaddesatelites = cantidaddesatelites
        self.masa = masa
        self.volumen = volumen
        self.diametro = diametro
        self.distanciasol = distanciasol
        self.tipoplaneta = tipoplaneta
        self.observable = observable

    def datos(self):
        print("Nombre del planeta =", self.nombre)
        print("Cantidad de satélites =", self.cantidaddesatelites)
        print("Masa del planeta =", self.masa)
        print("Volumen del planeta =", self.volumen)
        print("Diámetro del planeta =", self.diametro)
        print("Distancia al sol =", self.distanciasol)
        print("Tipo de planeta =", self.tipoplaneta)
        print("Es observable =", self.observable)

    def densidad(self):
        if self.volumen != 0:
            return self.masa / self.volumen
        return 0

    def es_planeta_exterior(self):
        distancia_en_ua = self.distanciasol / 149.6
        limite_exterior_ua = 3.4
        if distancia_en_ua > limite_exterior_ua:
            return True
        else:
            return False


def especificartipoplaneta():
    while True:
        tipoplaneta = input("Tipo de planeta: ").upper()
        if tipoplaneta in ['GASEOSO', 'TERRESTRE', 'ENANO']:
            return tipoplaneta
        else:
            print("Ingrese solo: 'GASEOSO', 'TERRESTRE', 'ENANO'")


def esobservable():
    while True:
        observable = input("¿Es observable a simple vista? (True/False): ").upper()
        if observable == 'TRUE':
            return True
        elif observable == 'FALSE':
            return False
        else:
            print("Ingrese solo: 'True', 'False'")


def main():
    print("Ingrese datos del planeta #1: ")
    nombre1 = input("Nombre del planeta: ")
    cantidaddesatelites1 = int(input("Cantidad de satélites del planeta: "))
    masa1 = float(input("Masa del planeta (kg): "))
    volumen1 = float(input("Volumen del planeta (km³): "))
    diametro1 = float(input("Diámetro del planeta (km): "))
    distanciasol1 = int(input("Distancia al Sol (millones de km): "))
    tipoplaneta1 = especificartipoplaneta()
    observable1 = esobservable()

    print("\nIngrese datos del planeta #2: ")
    nombre2 = input("Nombre del planeta: ")
    cantidaddesatelites2 = int(input("Cantidad de satélites del planeta: "))
    masa2 = float(input("Masa del planeta (kg): "))
    volumen2 = float(input("Volumen del planeta (km³): "))
    diametro2 = float(input("Diámetro del planeta (km): "))
    distanciasol2 = int(input("Distancia al Sol (millones de km): "))
    tipoplaneta2 = especificartipoplaneta()
    observable2 = esobservable()

    planeta1 = Planeta(nombre1, cantidaddesatelites1, masa1, volumen1, diametro1,
                       distanciasol1, tipoplaneta1, observable1)

    planeta2 = Planeta(nombre2, cantidaddesatelites2, masa2, volumen2, diametro2,
                       distanciasol2, tipoplaneta2, observable2)

    print("Datos del planeta #1: ")
    planeta1.datos()
    print("Densidad del planeta:", planeta1.densidad())
    print("¿Es un planeta exterior del sistema solar?: ", planeta1.es_planeta_exterior())

    print("\nDatos del planeta #2:")
    planeta2.datos()
    print("Densidad del planeta:", planeta2.densidad())
    print("¿Es un planeta exterior del sistema solar?: ", planeta2.es_planeta_exterior())


if __name__ == "__main__":
    main()

#ejercicio 2.3
class Automovil:
    def __init__(self, marca, modelo, motor, tipo_combustible, tipo_automovil, numero_puertas,
                 cantidad_asientos, velocidad_maxima, color):
        self.marca = marca
        self.modelo = modelo
        self.motor = motor
        self.tipo_combustible = tipo_combustible
        self.tipo_automovil = tipo_automovil
        self.numero_puertas = numero_puertas
        self.cantidad_asientos = cantidad_asientos
        self.velocidad_maxima = velocidad_maxima
        self.color = color
        self.velocidad_actual = 0

    # Métodos get
    def get_marca(self):
        return self.marca

    def get_modelo(self):
        return self.modelo

    def get_motor(self):
        return self.motor

    def get_tipo_combustible(self):
        return self.tipo_combustible

    def get_tipo_automovil(self):
        return self.tipo_automovil

    def get_numero_puertas(self):
        return self.numero_puertas

    def get_cantidad_asientos(self):
        return self.cantidad_asientos

    def get_velocidad_maxima(self):
        return self.velocidad_maxima

    def get_color(self):
        return self.color

    def get_velocidad_actual(self):
        return self.velocidad_actual

    # Métodos set
    def set_marca(self, marca):
        self.marca = marca

    def set_modelo(self, modelo):
        self.modelo = modelo

    def set_motor(self, motor):
        self.motor = motor

    def set_tipo_combustible(self, tipo_combustible):
        self.tipo_combustible = tipo_combustible

    def set_tipo_automovil(self, tipo_automovil):
        self.tipo_automovil = tipo_automovil

    def set_numero_puertas(self, numero_puertas):
        self.numero_puertas = numero_puertas

    def set_cantidad_asientos(self, cantidad_asientos):
        self.cantidad_asientos = cantidad_asientos

    def set_velocidad_maxima(self, velocidad_maxima):
        self.velocidad_maxima = velocidad_maxima

    def set_color(self, color):
        self.color = color

    def set_velocidad_actual(self, velocidad_actual):
        if velocidad_actual < 0:
            print("¡Advertencia! No es posible establecer una velocidad negativa.")
            self.velocidad_actual = 0
        else:
            self.velocidad_actual = velocidad_actual

    def acelerar(self, incremento_velocidad):
        nueva_velocidad = self.velocidad_actual + incremento_velocidad
        if nueva_velocidad <= self.velocidad_maxima:
            self.velocidad_actual = nueva_velocidad
        else:
            print(f"¡Advertencia! No se puede acelerar más allá de la velocidad máxima ({self.velocidad_maxima} km/h).")

    def desacelerar(self, decremento_velocidad):
        nueva_velocidad = self.velocidad_actual - decremento_velocidad
        if nueva_velocidad >= 0:
            self.velocidad_actual = nueva_velocidad
        else:
            print("¡Advertencia! No es posible desacelerar a una velocidad negativa.")
            self.velocidad_actual = 0

    def frenar(self):
        self.velocidad_actual = 0
        print("El automóvil ha frenado.")

    def calcular_tiempo_estimado(self, distancia):
        if self.velocidad_actual > 0:
            tiempo_estimado = distancia / self.velocidad_actual
            return tiempo_estimado
        else:
            return "El automóvil está detenido, no se puede calcular el tiempo de llegada."

    def mostrar_atributos(self):
        print("--- Atributos del Automóvil ---")
        print(f"Marca: {self.marca}")
        print(f"Modelo: {self.modelo}")
        print(f"Motor: {self.motor}")
        print(f"Tipo de Combustible: {self.tipo_combustible}")
        print(f"Tipo de Automóvil: {self.tipo_automovil}")
        print(f"Número de Puertas: {self.numero_puertas}")
        print(f"Cantidad de Asientos: {self.cantidad_asientos}")
        print(f"Velocidad Máxima: {self.velocidad_maxima} km/h")
        print(f"Color: {self.color}")
        print(f"Velocidad Actual: {self.velocidad_actual} km/h")
        print("-------------------------------")


def main():
    print("Por favor, ingrese los datos del automóvil:")
    marca = input("Marca: ")
    modelo = int(input("Modelo (año): "))
    motor = float(input("Motor (volumen en litros): "))
    tipo_combustible = input("Tipo de combustible (gasolina, bioetanol, diésel, biodiésel, gas natural): ")
    tipo_automovil = input("Tipo de automóvil (carro de ciudad, subcompacto, compacto, familiar, ejecutivo, SUV): ")
    numero_puertas = int(input("Número de puertas: "))
    cantidad_asientos = int(input("Cantidad de asientos: "))
    velocidad_maxima = int(input("Velocidad máxima (km/h): "))
    color = input("Color (blanco, negro, rojo, naranja, amarillo, verde, azul, violeta): ")

    mi_auto = Automovil(
        marca=marca,
        modelo=modelo,
        motor=motor,
        tipo_combustible=tipo_combustible,
        tipo_automovil=tipo_automovil,
        numero_puertas=numero_puertas,
        cantidad_asientos=cantidad_asientos,
        velocidad_maxima=velocidad_maxima,
        color=color
    )

    print("\nEstado inicial del automóvil:")
    mi_auto.mostrar_atributos()

    velocidad_inicial = int(input("\nIngrese la velocidad actual inicial (km/h): "))
    mi_auto.set_velocidad_actual(velocidad_inicial)
    print(f"Velocidad actual después de establecer: {mi_auto.get_velocidad_actual()} km/h")

    incremento = int(input("Ingrese la cantidad a acelerar (km/h): "))
    mi_auto.acelerar(incremento)
    print(f"Velocidad actual después de acelerar: {mi_auto.get_velocidad_actual()} km/h")

    decremento = int(input("Ingrese la cantidad a desacelerar (km/h): "))
    mi_auto.desacelerar(decremento)
    print(f"Velocidad actual después de desacelerar: {mi_auto.get_velocidad_actual()} km/h")

    input("\nPresione Enter para frenar el automóvil.")
    mi_auto.frenar()
    print(f"Velocidad actual después de frenar: {mi_auto.get_velocidad_actual()} km/h")


if __name__ == "__main__":
    main()

#ejercicio 2.4

import math

class Circulo:
    def __init__(self, radio):
        self.radio = radio

    def area(self):
        return math.pi * self.radio ** 2

    def perimetro(self):
        return 2 * math.pi * self.radio


class Rectangulo:
    def __init__(self, base, altura):
        self.base = base
        self.altura = altura

    def area(self):
        return self.base * self.altura

    def perimetro(self):
        return 2 * (self.base + self.altura)


class Cuadrado:
    def __init__(self, lado):
        self.lado = lado

    def area(self):
        return self.lado ** 2

    def perimetro(self):
        return 4 * self.lado


class TrianguloRectangulo:
    def __init__(self, base, altura):
        self.base = base
        self.altura = altura

    def area(self):
        return (self.base * self.altura) / 2

    def perimetro(self):
        return self.base + self.altura + self.hipotenusa()

    def hipotenusa(self):
        return math.sqrt(self.base ** 2 + self.altura ** 2)

    def tipo_triangulo(self):
        a = self.base
        b = self.altura
        c = self.hipotenusa()

        if a == b == c:
            return "Equilátero"
        elif a == b or a == c or b == c:
            return "Isósceles"
        else:
            return "Escaleno"


class Rombo:
    def __init__(self, diagonal_mayor, diagonal_menor, lado):
        self.diagonal_mayor = diagonal_mayor
        self.diagonal_menor = diagonal_menor
        self.lado = lado

    def area(self):
        return (self.diagonal_mayor * self.diagonal_menor) / 2

    def perimetro(self):
        return 4 * self.lado


class Trapecio:
    def __init__(self, base_mayor, base_menor, altura, lado1, lado2):
        self.base_mayor = base_mayor
        self.base_menor = base_menor
        self.altura = altura
        self.lado1 = lado1
        self.lado2 = lado2

    def area(self):
        return ((self.base_mayor + self.base_menor) * self.altura) / 2

    def perimetro(self):
        return self.base_mayor + self.base_menor + self.lado1 + self.lado2


# Clase de prueba
def main():
    # Crear figuras geométricas y probar métodos
    radio = float(input('Radio del círculo en cm: '))
    circulo = Circulo(radio)
    print("Círculo:")
    print(f"Área: {circulo.area():.2f} cm²")
    print(f"Perímetro: {circulo.perimetro():.2f} cm\n")

    base = float(input('Base del rectángulo en cm: '))
    altura = float(input('Altura del rectángulo en cm: '))
    rectangulo = Rectangulo(base, altura)
    print("Rectángulo:")
    print(f"Área: {rectangulo.area()} cm²")
    print(f"Perímetro: {rectangulo.perimetro()} cm\n")

    lado = float(input('Lado del cuadrado en cm: '))
    cuadrado = Cuadrado(lado)
    print("Cuadrado:")
    print(f"Área: {cuadrado.area()} cm²")
    print(f"Perímetro: {cuadrado.perimetro()} cm\n")

    base = float(input('Base del triángulo en cm: '))
    altura = float(input('Altura del triángulo en cm: '))
    triangulo = TrianguloRectangulo(base, altura)
    print("Triángulo Rectángulo:")
    print(f"Área: {triangulo.area()} cm²")
    print(f"Perímetro: {triangulo.perimetro():.2f} cm")
    print(f"Hipotenusa: {triangulo.hipotenusa():.2f} cm")
    print(f"Tipo de triángulo: {triangulo.tipo_triangulo()}\n")

    diagonal_mayor = float(input('Diagonal mayor del rombo en cm: '))
    diagonal_menor = float(input('Diagonal menor del rombo en cm: '))
    lado = float(input('Lado del rombo en cm: '))
    rombo = Rombo(diagonal_mayor, diagonal_menor, lado)
    print("Rombo:")
    print(f"Área: {rombo.area()} cm²")
    print(f"Perímetro: {rombo.perimetro()} cm\n")

    base_mayor = float(input('Base mayor del trapecio en cm: '))
    base_menor = float(input('Base menor del trapecio en cm: '))
    altura = float(input('Altura del trapecio en cm: '))
    lado1 = float(input('Lado1 del trapecio en cm: '))
    lado2 = float(input('Lado2 del trapecio en cm: '))
    trapecio = Trapecio(base_mayor, base_menor, altura, lado1, lado2)
    print("Trapecio:")
    print(f"Área: {trapecio.area()} cm²")
    print(f"Perímetro: {trapecio.perimetro()} cm")


if __name__ == "__main__":
    main()

class CuentaBancaria:
    def __init__(self, nombres_titular, apellidos_titular, numero_cuenta, tipo_cuenta, interes_mensual=0.0):
        self.nombres_titular = nombres_titular
        self.apellidos_titular = apellidos_titular
        self.numero_cuenta = numero_cuenta
        self.tipo_cuenta = tipo_cuenta.upper()
        self.saldo = 0.0
        self.interes_mensual = interes_mensual

    def imprimir_datos(self):
        print("\nDatos de la cuenta bancaria:")
        print(f"Nombres del titular: {self.nombres_titular}")
        print(f"Apellidos del titular: {self.apellidos_titular}")
        print(f"Número de cuenta: {self.numero_cuenta}")
        print(f"Tipo de cuenta: {self.tipo_cuenta}")
        print(f"Saldo actual: ${self.saldo:.2f}")
        print(f"Interés mensual: {self.interes_mensual}%")

    def consultar_saldo(self):
        return self.saldo

    def consignar(self, monto):
        if monto > 0:
            self.saldo += monto
            print(f"Se ha consignado ${monto:.2f} en la cuenta. El nuevo saldo es ${self.saldo:.2f}")
            return True
        else:
            print("Error: El monto a consignar debe ser positivo")
            return False

    def retirar(self, monto):
        if monto <= 0:
            print("Error: El monto a retirar debe ser positivo")
            return False
        elif monto > self.saldo:
            print("Error: Fondos insuficientes para realizar el retiro")
            return False
        else:
            self.saldo -= monto
            print(f"Se ha retirado ${monto:.2f} de la cuenta. El nuevo saldo es ${self.saldo:.2f}")
            return True

    def aplicar_interes_mensual(self):
        if self.interes_mensual > 0:
            interes = self.saldo * (self.interes_mensual / 100)
            self.saldo += interes
            print(f"Se ha aplicado un interés de {self.interes_mensual}% "
                  f"(${interes:.2f}). Nuevo saldo: ${self.saldo:.2f}")
            return True
        return False


def main():
    nombres = input('Nombres del titular: ')
    apellidos = input('Apellidos del titular: ')
    no_cuenta = input('Número de cuenta: ')
    tipo_cuenta = input('Tipo de la cuenta (Ahorros/Corriente): ')

    cuenta = CuentaBancaria(
        nombres_titular=nombres,
        apellidos_titular=apellidos,
        numero_cuenta=no_cuenta,
        tipo_cuenta=tipo_cuenta,
        interes_mensual=1.5
    )

    # Imprimir datos iniciales
    cuenta.imprimir_datos()

    # Realizar operaciones
    print('\nConsignar dinero a la cuenta')
    monto = float(input('Cantidad de dinero a consignar: '))
    cuenta.consignar(monto)

    monto = float(input('Cantidad de dinero a consignar: '))
    cuenta.consignar(monto)

    monto = float(input('Cantidad de dinero a retirar: '))
    cuenta.retirar(monto)

    # Aplicar interés mensual
    cuenta.aplicar_interes_mensual()

    # Consultar saldo final
    print(f"\nSaldo final: ${cuenta.consultar_saldo():.2f}")


if __name__ == "__main__":
    main()